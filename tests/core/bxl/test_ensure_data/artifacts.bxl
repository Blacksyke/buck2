# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is dual-licensed under either the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree or the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree. You may select, at your option, one of the
# above-listed licenses.

def _artifact_path_test_impl(ctx):
    outputs = {}
    artifact = ctx.fs.source("artifacts/DATA")

    outputs.update({"source_artifact": artifact})
    outputs.update({"source_artifact_project_rel_path": get_path_without_materialization(artifact, ctx)})
    outputs.update({"source_artifact_abs_path": get_path_without_materialization(artifact, ctx, abs = True)})

    node = ctx.configured_targets("artifacts:with_build_artifact")
    providers = ctx.analysis(node).providers()
    default_output = providers[DefaultInfo].default_outputs[0]

    outputs.update({"build_artifact": default_output})
    outputs.update({"build_artifact_project_rel_path": get_path_without_materialization(default_output, ctx)})
    outputs.update({"build_artifact_abs_path": get_path_without_materialization(default_output, ctx, abs = True)})
    ctx.output.print_json(outputs)

artifact_path_test = bxl_main(
    impl = _artifact_path_test_impl,
    cli_args = {
    },
)

def _cmd_args_artifact_path_test(ctx):
    outputs = {}
    target = ctx.configured_targets("root//kind:target_with_outputs")
    result = ctx.analysis(target)
    run_info = result.providers()[RunInfo]
    outputs.update({"target_with_outputs_rel_paths": sorted(get_paths_without_materialization(run_info, ctx))})
    outputs.update({"target_with_outputs_abs_paths": sorted(get_paths_without_materialization(run_info, ctx, abs = True))})

    target = ctx.configured_targets("root//kind:target_with_tset")
    tset_result = ctx.analysis(target)
    run_info = tset_result.providers()[RunInfo]
    outputs.update({"target_with_tset_rel_paths": sorted(get_paths_without_materialization(run_info, ctx))})
    outputs.update({"target_with_tset_abs_paths": sorted(get_paths_without_materialization(run_info, ctx, abs = True))})

    ctx.output.print_json(outputs)

cmd_args_artifact_path_test = bxl_main(
    impl = _cmd_args_artifact_path_test,
    cli_args = {},
)
